        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:4
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:#include <string>
        -:    5:#include <vector>
        -:    6:
        -:    7:using std::string;
        -:    8:using std::vector;
        -:    9:
        -:   10:/*
        -:   11:  The function receives a string counts how many times the same character 
        -:   12:  occurs at the beginning of the string, before any other characters (or the
        -:   13:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   14:  'z' and any ASCII characters are allowed.
        -:   15:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8 returned 100% blocks executed 83%
        8:   16:int Password::count_leading_characters(string phrase){
        8:   17:  int repetition = 1;
        8:   18:  int index = 0;
        -:   19:
       8*:   20:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 8
branch  1 taken 4 (fallthrough)
branch  2 taken 4
call    3 returned 4
call    4 returned 4
branch  5 taken 0 (fallthrough)
branch  6 taken 4
branch  7 taken 0
branch  8 taken 8 (fallthrough)
    #####:   21:    repetition++;
    #####:   22:    index++;
        -:   23:  }
        8:   24:  return repetition;
        -:   25:}
        -:   26:
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 19 returned 100% blocks executed 100%
       19:   27:bool Password::has_mixed_case(string pass){
       19:   28:  bool lower = false;
       19:   29:  bool upper = false;
      137:   30:  for(int i = 0; i < pass.size(); i++){
call    0 returned 137
branch  1 taken 118
branch  2 taken 19 (fallthrough)
      118:   31:    if( pass[i] >= 'A' && pass[i] <= 'Z' ){
call    0 returned 118
branch  1 taken 118 (fallthrough)
branch  2 taken 0
call    3 returned 118
branch  4 taken 29 (fallthrough)
branch  5 taken 89
branch  6 taken 29 (fallthrough)
branch  7 taken 89
       29:   32:      upper = true;
        -:   33:    }
       89:   34:    else if( pass[i] < 'z'){
call    0 returned 89
branch  1 taken 89 (fallthrough)
branch  2 taken 0
       89:   35:      lower = true;
        -:   36:    }
        -:   37:  }
       19:   38:  return upper && lower;
branch  0 taken 14 (fallthrough)
branch  1 taken 5
branch  2 taken 10 (fallthrough)
branch  3 taken 4
        -:   39:}
        -:   40:
function _ZN8PasswordC2Ev called 38 returned 100% blocks executed 53%
       38:   41:Password::Password() {
call    0 returned 38
       38:   42:  pass_history.push_back("ChicoCA-95929");
call    0 returned 38
call    1 returned 38
branch  2 taken 38 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 38
branch  5 taken 38 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 38
call    8 returned 38
call    9 never executed
call   10 never executed
       38:   43:}
call    0 never executed
        -:   44:
        -:   45:
        -:   46:/*
        -:   47:  receives a password and sets the latest in pass_history to it if and only
        -:   48:  if it meets all criteria:
        -:   49:    1. The password is at least 8 letters long
        -:   50:    2. It has no more than 3 of the same leading characters
        -:   51:    3. It has mixed case (at least one upper case and at least one lower case)
        -:   52:    4. It was not a previous password in the history
        -:   53:  */
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   54:  void Password::set(string s) {
    #####:   55:    int flag = 1;
        -:   56:
    #####:   57:    if(s.length() > 7 && count_leading_characters(s) < 4 && has_mixed_case(s)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
        -:   58:
    #####:   59:      while(int i = 0 < pass_history.size()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:        if(pass_history[i] == s) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   61:          flag = 1;
    #####:   62:          break;
        -:   63:        }
    #####:   64:      }
        -:   65:
    #####:   66:      flag = 0;
        -:   67:    }
        -:   68:
    #####:   69:    if(flag == 0) {
branch  0 never executed
branch  1 never executed
    #####:   70:      pass_history.push_back(s);
call    0 never executed
        -:   71:    }
        -:   72:
    #####:   73:  }
        -:   74:
        -:   75:
        -:   76:    /*
        -:   77:  receives a string and authenticates it against the latest password in the
        -:   78:  pass_history, returning true for an exact match or false when it does not match
        -:   79:  or if a password has not been set.
        -:   80:  */
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 90%
       11:   81:  bool Password::authenticate(string s){
       11:   82:    if(pass_history.size() == 0) {
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
    #####:   83:      return false;
        -:   84:    }
        -:   85:
       11:   86:    if(s == pass_history[pass_history.size()-1]) {
call    0 returned 11
call    1 returned 11
call    2 returned 11
branch  3 taken 3 (fallthrough)
branch  4 taken 8
        3:   87:      return false;
        -:   88:    } 
        -:   89:
        8:   90:    return true;
        -:   91:  }
        -:   92:
